typeIcal(4)
typeIcal(5)
typeIcal(6)
typeIcal(7)
typeIcal(8)
typeIcal(9)
typeIcal(10)
typeIcal <- function(sigma){
count <- 0
for(i in 1:10000){
x <- rnorm(m,0,1)
y <- rnorm(n,0,sigma)
xbar <- mean(x)
ybar <- mean(y)
varx <-var(x)
vary <- var(y)
tbf  <- (xbar-ybar)/(sqrt(varx/m+vary/n))
if(tbf > T | tbf < (-T)){
count = count + 1
}
}
return(count/10000)
}
typeIcal(1)
typeIcal(2)
typeIcal(3)
typeIcal(4)
typeIcal(5)
typeIcal(6)
typeIcal(7)
typeIcal(8)
typeIcal(9)
typeIcal(10)
typeIcal(0.5)
typeIcal(1)
typeIcal(2)
typeIcal(3)
typeIcal(4)
typeIcal(5)
typeIcal(6)
typeIcal(7)
typeIcal(8)
typeIcal(9)
typeIcal(10)
samplefun<-function(n,p){
a<-sample(1,prob=p)
n1<-rnorm(n,0,1)
n2<-rnorm(n,0,5)
Y<-a*n1+(1-a)*n2
return(Y)
}
library(MASS)
mu <- c(0,0)
varmatrix <- matrix(c(1,rho,rho,1),nrow=2)
rhohat<-c()
a<-mvrnorm(n,mu,varmatrix)
a
rhohat[i]<-cor(a)
rhohat[i]<-cor(a[,1],a[,2])
i=1
a<-mvrnorm(n,mu,varmatrix)
rhohat[i]<-cor(a[,1],a[,2])
mu <- c(0,0)
varmatrix <- matrix(c(1,rho,rho,1),nrow=2)
rhohat<-c()
for(i in 1000){
a<-mvrnorm(n,mu,varmatrix)
rhohat[i]<-cor(a[,1],a[,2])
}
i=1
a<-mvrnorm(n,mu,varmatrix)
rhohat[i]<-cor(a[,1],a[,2])
i=2
a<-mvrnorm(n,mu,varmatrix)
rhohat[i]<-cor(a[,1],a[,2])
for(i in 1:1000){
a<-mvrnorm(n,mu,varmatrix)
rhohat[i]<-cor(a[,1],a[,2])
}
rhobar<-mean(rhohat)
bivariate<-function(rho,n){
mu <- c(0,0)
varmatrix <- matrix(c(1,rho,rho,1),nrow=2)
rhohat<-c()
for(i in 1:1000){
a<-mvrnorm(n,mu,varmatrix)
rhohat[i]<-cor(a[,1],a[,2])
}
rhobar<-mean(rhohat)
sehat<-sqrt((999/1000)*(sd(rhohat))^2)
z<-qnorm((1-0.95)/2,lower.tail=F)
return(list(ci=c(mean(rhohat)-z*sehat,mean(rhohat)+z*sehat),se=sehat))
}
bivariate(0.99,10)
bivariate(-0.5,10)
bivariate(0.99,1000)
bivariate(-0.5,1000)
bivariate(0,1000)
log(27)
0.5*0.13
0.5*(0.13+0.4)
0.065/0.265
10000/(200^2*201)
0.755*0.5+0.593*1+0.407*1.5+0.031*3.5
1.6895/1.756
1.756/(1.756+2.214)
curve(exp(-x))
curve(log(1+exp(-x)))
curve(log(1+exp(-x)),xlim=c(-2,3))
curve(log(1+exp(-x)),xlim=c(-2,3),ylim=c(-2,3))
curve(max(0,1-x))
t<-matrix(c(0.6,0.4,0.4,0.2,0.4,0.2,0.2,0.2,0.4))
t<-matrix(c(0.6,0.4,0.4,0.2,0.4,0.2,0.2,0.2,0.4),nrow=3)
View(t)
t<-matrix(c(0.6,0.4,0.4,0.2,0.4,0.2,0.2,0.2,0.4),nrow=3,byrow=T)
View(t)
c<-matrix(c(1,0,0,0,1,0,0,0,1),nrow=3)
View(c)
solve(t,c)
t<-matrix(c(-0.4,0.4,0.4,0.2,-0.6,0.2,0.2,0.2,-0.6,1,1,1),nrow=4,byrow=T)
View(t)
c<-c(0,0,0,1)
solve(t,c)
log2
log10
(3/7)^2*log2(3/7)+(4/7)^2*log(4/7)
(3/7)*log2(3/7)+(4/7)*log(4/7)
(3/7)^2*log2(3/7)+(4/7)^2*log2(4/7)
(3/7)*log2(3/7)+(4/7)*log2(4/7)
(3/7)*(4/7)*log2(3/7)+(4/7)*(3/7)*log2(4/7)
-0.4881472+-0.497081
(3/7)*(0.6*log2(0.6)+0.4*log2(0.4))+(4/7)*(0.3*log2(0.3)+0.7*log2(0.7))
25！
25!
factorial(25)/1e7
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tydytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
?tidy
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
Corpus
library(tidytext)
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
setwd("~/Documents/GitHub/ADS_Teaching/Projects_StarterCodes/Project1-RNotebook/data/InauguralSpeeches")
print(R.version)
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
### Inauguaral speeches
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
library("rvest")
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
print(R.version)
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
library("rvest")
library("tibble")
# You may need to run
# sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
# in order to load qdap
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
inaug=f.speechlinks(main.page)
main.page
library("qdap")
library("sentimentr")
sudo ln -f -s $(/usr/libexec/java_home)/jre/lib/server/libjvm.dylib /usr/local/lib
install.packages("tidytext",dependencies=TRUE,repos='http://cran.rstudio.com/')
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
f.speechlinks=function(html.page, node.type=".ver12 a"){
urls <- html.page %>% # feed `main.page` to the next step
html_nodes(node.type) %>% # get the CSS nodes
html_attr("href") # extract the URLs
# Get link text
links <- main.page %>% # feed `main.page` to the next step
html_nodes(node.type) %>% # get the CSS nodes
html_text() # extract the link text
# Combine `links` and `urls` into a data.frame
out <- data.frame(links = links, urls = urls, stringsAsFactors = FALSE)
return(out)
}
inaug=f.speechlinks(main.page)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#### Nomination speeches
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
# Get link URLs
nomin <- f.speechlinks(main.page)
#head(nomin)
#
#### Farewell speeches
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
farewell <- f.speechlinks(main.page)
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.list$fulltext=NA
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/fulltext/",
speech.list$type[i],
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
f.plotsent.len=function(In.list, InFile, InType, InTerm, President){
col.use=c("lightgray", "red2", "darkgoldenrod1",
"chartreuse3", "blueviolet",
"darkgoldenrod2", "dodgerblue3",
"darkgoldenrod1", "darkgoldenrod1",
"black", "darkgoldenrod2")
In.list$topemotion=apply(select(In.list,
anger:positive),
1, which.max)
In.list$topemotion.v=apply(select(In.list,
anger:positive),
1, max)
In.list$topemotion[In.list$topemotion.v<0.05]=0
In.list$topemotion=In.list$topemotion+1
temp=In.list$topemotion.v
In.list$topemotion.v[temp<0.05]=1
df=In.list%>%filter(File==InFile,
type==InType, Term==InTerm)%>%
select(sent.id, word.count,
topemotion, topemotion.v)
ptcol.use=alpha(col.use[df$topemotion], sqrt(sqrt(df$topemotion.v)))
plot(df$sent.id, df$word.count,
col=ptcol.use,
type="h", #ylim=c(-10, max(In.list$word.count)),
main=President)
}
f.smooth.topic=function(x, y.mat){
y.out=y.mat
for(i in 1:ncol(y.mat)){
y.out[,i]=pmax(smooth.spline(x, y.mat[,i])$y, 0)
}
return(y.out)
}
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/fulltext/",
speech.list$type[i],
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
setwd("~/Documents/GitHub/ADS_Teaching/Projects_StarterCodes/Project1-RNotebook")
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
setwd("~/Documents/GitHub/ADS_Teaching/Projects_StarterCodes/Project1-RNotebook")
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
speeches=list.files(path = folder.path, pattern = "*.txt")
getwd()
folder.path
setwd("~/Documents/GitHub/ADS_Teaching/Projects_StarterCodes")
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
print(R.version)
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
speeches
?list.files
setwd("~/Documents/GitHub/ADS_Teaching/Projects_StarterCodes/Project1-RNotebook/data/inaugurals")
getwd()
folder.path = "/Users/zhaojing/Documents/GitHub/ADS_Teaching/Projects_StarterCodes/Project1-RNotebook/data/inaugurals"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
?substr
substr("abcdef", 2, 4)
nchar(speeches)
nchar(speeches)-4
?Corpus
View(f.plotsent.len)
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
？tidy
?tidy
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
tdm.overall
wordcloud(tdm.overall$term, tdm.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
library(shiny)
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('speech1', 'Speech 1',
speeches,
selected=speeches[5])),
column(4, selectInput('speech2', 'Speech 2', speeches,
selected=speeches[9])),
column(4, sliderInput('nwords', 'Number of words', 3,
min = 20, max = 200, value=100, step = 20))
),
fluidRow(
plotOutput('wordclouds', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
list(dtm.term1=ff.dtm$term[ff.dtm$document==as.character(input$speech1)],
dtm.count1=ff.dtm$count[ff.dtm$document==as.character(input$speech1)],
dtm.term2=ff.dtm$term[ff.dtm$document==as.character(input$speech2)],
dtm.count2=ff.dtm$count[ff.dtm$document==as.character(input$speech2)])
})
output$wordclouds <- renderPlot(height = 400, {
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(selectedData()$dtm.term1,
selectedData()$dtm.count1,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech1)
wordcloud(selectedData()$dtm.term2,
selectedData()$dtm.count2,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech2)
})
},
options = list(height = 600)
)
source("../lib/plotstacked.R")
setwd()
source("../lib/speechFuncs.R")
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
#head(inaug)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#### Nomination speeches
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
# Get link URLs
nomin <- f.speechlinks(main.page)
#head(nomin)
#
#### Farewell speeches
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
# Get link URLs
farewell <- f.speechlinks(main.page)
#head(farewell)
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
inaug.list
nomin.list
farewell.list
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.list=cbind(speech.list, speech.url)
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.url
speech.list
length(speech.url)
size(speech.list)
dim(speech.list)
dim(speech.url)
speech.url[125,:]
speech.url[125,:]
speech.url[125,]
speech.url[126,:]
dim(inaug)
dim(nomin)
dim(farewell)
speech.list
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
setwd()
getwd()
